// <auto-generated />
using System;
using Agora.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agora.DAL.Migrations
{
    [DbContext(typeof(AgoraContext))]
    [Migration("20250317125808_Added-field")]
    partial class Addedfield
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressUser", b =>
                {
                    b.Property<int>("AddressesId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AddressUser");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Appartement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Agora.DAL.Entities.BankCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Holder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Cashback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("Cashbacks");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Agora.DAL.Entities.DeliveryOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstimatedDays")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("DeliveryOptions");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Agora.DAL.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FAQCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FAQCategoryId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Agora.DAL.Entities.FAQCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQCategories");
                });

            modelBuilder.Entity("Agora.DAL.Entities.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PaymentDeadline")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Agora.DAL.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceAtMoment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashbackUsed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("PaymentMethodId")
                        .IsUnique()
                        .HasFilter("[PaymentMethodId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Agora.DAL.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankCardId")
                        .HasColumnType("int");

                    b.Property<int?>("CashbackId")
                        .HasColumnType("int");

                    b.Property<int?>("GiftCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId")
                        .IsUnique()
                        .HasFilter("[BankCardId] IS NOT NULL");

                    b.HasIndex("CashbackId")
                        .IsUnique()
                        .HasFilter("[CashbackId] IS NOT NULL");

                    b.HasIndex("GiftCardId")
                        .IsUnique()
                        .HasFilter("[GiftCardId] IS NOT NULL");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ImagesPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Agora.DAL.Entities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Agora.DAL.Entities.ReturnItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnItems");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Agora.DAL.Entities.SellerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerReviews");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeliveryOptionsId")
                        .IsUnique()
                        .HasFilter("[DeliveryOptionsId] IS NOT NULL");

                    b.HasIndex("OrderItemId")
                        .IsUnique()
                        .HasFilter("[OrderItemId] IS NOT NULL");

                    b.HasIndex("SellerId");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdatedAt")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Agora.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateAdded")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("ProductWishlist", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "WishlistsId");

                    b.HasIndex("WishlistsId");

                    b.ToTable("ProductWishlist");
                });

            modelBuilder.Entity("AddressUser", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agora.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Agora.DAL.Entities.Address", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Admin", b =>
                {
                    b.HasOne("Agora.DAL.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Agora.DAL.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agora.DAL.Entities.BankCard", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("BankCards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Cashback", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithOne("Cashback")
                        .HasForeignKey("Agora.DAL.Entities.Cashback", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Customer", b =>
                {
                    b.HasOne("Agora.DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Agora.DAL.Entities.Customer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agora.DAL.Entities.DeliveryOptions", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Seller", "Seller")
                        .WithMany("DeliveryOptions")
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Agora.DAL.Entities.FAQ", b =>
                {
                    b.HasOne("Agora.DAL.Entities.FAQCategory", "FAQCategory")
                        .WithMany("FAQs")
                        .HasForeignKey("FAQCategoryId");

                    b.Navigation("FAQCategory");
                });

            modelBuilder.Entity("Agora.DAL.Entities.GiftCard", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("GiftCards")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Order", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Agora.DAL.Entities.OrderItem", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Agora.DAL.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Payment", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Agora.DAL.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Agora.DAL.Entities.Payment", "OrderId");

                    b.HasOne("Agora.DAL.Entities.PaymentMethod", "PaymentMethod")
                        .WithOne("Payment")
                        .HasForeignKey("Agora.DAL.Entities.Payment", "PaymentMethodId");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Agora.DAL.Entities.PaymentMethod", b =>
                {
                    b.HasOne("Agora.DAL.Entities.BankCard", "BankCard")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("Agora.DAL.Entities.PaymentMethod", "BankCardId");

                    b.HasOne("Agora.DAL.Entities.Cashback", "Cashback")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("Agora.DAL.Entities.PaymentMethod", "CashbackId");

                    b.HasOne("Agora.DAL.Entities.GiftCard", "GiftCard")
                        .WithOne("PaymentMethod")
                        .HasForeignKey("Agora.DAL.Entities.PaymentMethod", "GiftCardId");

                    b.Navigation("BankCard");

                    b.Navigation("Cashback");

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Product", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Agora.DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Agora.DAL.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Agora.DAL.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.HasOne("Agora.DAL.Entities.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Store");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Agora.DAL.Entities.ProductReview", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Agora.DAL.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Return", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("Returns")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Agora.DAL.Entities.Order", "Order")
                        .WithMany("Returns")
                        .HasForeignKey("OrderId");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Agora.DAL.Entities.ReturnItem", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Product", "Product")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Agora.DAL.Entities.Return", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnId");

                    b.Navigation("Product");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Seller", b =>
                {
                    b.HasOne("Agora.DAL.Entities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("Agora.DAL.Entities.Seller", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agora.DAL.Entities.SellerReview", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("SellerReviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Agora.DAL.Entities.Seller", "Seller")
                        .WithMany("SellerReviews")
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Shipping", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Address", "Address")
                        .WithMany("Shipping")
                        .HasForeignKey("AddressId");

                    b.HasOne("Agora.DAL.Entities.DeliveryOptions", "DeliveryOptions")
                        .WithOne("Shipping")
                        .HasForeignKey("Agora.DAL.Entities.Shipping", "DeliveryOptionsId");

                    b.HasOne("Agora.DAL.Entities.OrderItem", "OrderItem")
                        .WithOne("Shipping")
                        .HasForeignKey("Agora.DAL.Entities.Shipping", "OrderItemId");

                    b.HasOne("Agora.DAL.Entities.Seller", "Seller")
                        .WithMany("Shippings")
                        .HasForeignKey("SellerId");

                    b.Navigation("Address");

                    b.Navigation("DeliveryOptions");

                    b.Navigation("OrderItem");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Store", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Seller", "Seller")
                        .WithMany("Stores")
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Subcategory", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Support", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("Supports")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Wishlist", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Customer", "Customer")
                        .WithMany("Wishlists")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProductWishlist", b =>
                {
                    b.HasOne("Agora.DAL.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agora.DAL.Entities.Wishlist", null)
                        .WithMany()
                        .HasForeignKey("WishlistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Agora.DAL.Entities.Address", b =>
                {
                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Agora.DAL.Entities.BankCard", b =>
                {
                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Cashback", b =>
                {
                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Country", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Customer", b =>
                {
                    b.Navigation("BankCards");

                    b.Navigation("Cashback");

                    b.Navigation("GiftCards");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("ProductReviews");

                    b.Navigation("Returns");

                    b.Navigation("SellerReviews");

                    b.Navigation("Supports");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("Agora.DAL.Entities.DeliveryOptions", b =>
                {
                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agora.DAL.Entities.FAQCategory", b =>
                {
                    b.Navigation("FAQs");
                });

            modelBuilder.Entity("Agora.DAL.Entities.GiftCard", b =>
                {
                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("Agora.DAL.Entities.OrderItem", b =>
                {
                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Agora.DAL.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductReviews");

                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Return", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Seller", b =>
                {
                    b.Navigation("DeliveryOptions");

                    b.Navigation("SellerReviews");

                    b.Navigation("Shippings");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agora.DAL.Entities.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Agora.DAL.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });
#pragma warning restore 612, 618
        }
    }
}
